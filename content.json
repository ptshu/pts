{"meta":{"title":"菩提树","subtitle":"www.ptsh.cf","description":"菩提的个人小站","author":"菩提","url":"https://www.ptsh.cf","root":"/"},"pages":[{"title":"About","date":"2022-08-13T15:32:03.000Z","updated":"2022-08-13T16:52:07.941Z","comments":true,"path":"about/index.html","permalink":"https://www.ptsh.cf/about/index.html","excerpt":"","text":"菩提树说明"},{"title":"categories","date":"2017-05-27T05:47:40.000Z","updated":"2022-08-13T16:26:44.164Z","comments":true,"path":"categories/index.html","permalink":"https://www.ptsh.cf/categories/index.html","excerpt":"","text":""},{"title":"guestbook","date":"2022-08-13T15:39:11.000Z","updated":"2022-08-13T15:39:11.562Z","comments":true,"path":"guestbook/index.html","permalink":"https://www.ptsh.cf/guestbook/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-08-13T15:10:59.000Z","updated":"2022-08-13T16:55:36.291Z","comments":true,"path":"tags/index.html","permalink":"https://www.ptsh.cf/tags/index.html","excerpt":"","text":"标签列表"}],"posts":[{"title":"git常用命令","slug":"git常用命令","date":"2022-09-29T13:09:23.000Z","updated":"2022-09-29T13:10:59.529Z","comments":true,"path":"2022/09/29/git常用命令/","link":"","permalink":"https://www.ptsh.cf/2022/09/29/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"配置github用户信息 git config –global user.email “&#122;&#115;&#107;&#97;&#x6e;&#x67;&#64;&#113;&#x71;&#x2e;&#x63;&#111;&#109;“ git config –global user.name “ptshu” 配置远程仓库位置 git remote add origin https:&#x2F;&#x2F;@github.com&#x2F;&#x2F;.git &#x2F;&#x2F;第一次添加配置或者 git remote set-url origin https:&#x2F;&#x2F;@github.com&#x2F;&#x2F;.git &#x2F;&#x2F;已存在而再次更改配置 git remote set-url origin https://ghp_W42ArMmNdN9PROqD和谐一下2ZAFRaWXGwCyiY0l95jI@github.com/ptshu/hexo.git 上传更改文件git add .git commit -m “信息”git push","text":"配置github用户信息 git config –global user.email “&#122;&#115;&#107;&#97;&#x6e;&#x67;&#64;&#113;&#x71;&#x2e;&#x63;&#111;&#109;“ git config –global user.name “ptshu” 配置远程仓库位置 git remote add origin https:&#x2F;&#x2F;@github.com&#x2F;&#x2F;.git &#x2F;&#x2F;第一次添加配置或者 git remote set-url origin https:&#x2F;&#x2F;@github.com&#x2F;&#x2F;.git &#x2F;&#x2F;已存在而再次更改配置 git remote set-url origin https://ghp_W42ArMmNdN9PROqD和谐一下2ZAFRaWXGwCyiY0l95jI@github.com/ptshu/hexo.git 上传更改文件git add .git commit -m “信息”git push 注意:第一次push用”git push -u origin master”git push -u origin master 是将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。git push origin master 是上传本地当前分支代码到master分支。git push 是上传本地所有分支代码到远程对应的分支上。 ! [rejected] master -&gt; master (fetch first)问题的解决方案温柔解决法：1.通过git pull 先将本地库更新到与远程库一致的版本，但要注意本地库后来做的修改可能被覆盖，最好使用git fetch(不会自动合并)，查看更新情况再有选择合并，或者先将本地库修改过的文件备份，git pull后再重新修改； 2.再运行git push即可成功。 暴力解决法：强制上传方式： git push -f它会忽略版本不一致等问题，谨慎使用，因为会覆盖远程仓库，如果远程仓库有更新或者同伴有修改，会被覆盖掉。 GitHub个人访问令牌会自行删除的原因：您可能会将令牌提交到您的 GitHub 存储库。如果是这种情况，Github 将立即删除令牌。因此您需要将令牌设置为系统中的变量环境。 修改本地分支名称 git branch -m oldBranchName newBranchNamegit branch -m gh-pages master git pull命令https://www.yiibai.com/git/git_pull.html","categories":[],"tags":[]},{"title":"Markdown的基本语法","slug":"Markdown的基本语法","date":"2022-09-08T08:44:27.000Z","updated":"2022-09-13T09:22:49.304Z","comments":true,"path":"2022/09/08/Markdown的基本语法/","link":"","permalink":"https://www.ptsh.cf/2022/09/08/Markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","excerpt":"学习来源：https://blog.csdn.net/qq_40818172/article/details/126260661?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-126260661-blog-50911365.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-126260661-blog-50911365.pc_relevant_default&amp;utm_relevant_index=6 1 标题使用#号标记，可以表示1-6级标题， 随#的个数递增，一级标题字号最大，六级标题字号最小。代码如下： 123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 效果： 一级标题二级标题三级标题四级标题五级标题六级标题2 字体星号与下划线都可以，单是斜体，双是粗体，三是粗斜体 123456*这是斜体*_这是斜体_**这是粗体**__这是粗体__ ***这是粗斜体*** ___这是粗斜体___ 效果：这是斜体这是斜体这是粗体这是粗体 这是粗斜体 这是粗斜体 3 引用Markdown 中引用通过符号 &gt; 来实现。&gt; 符号后的空格，可有可无。在引用的区块内，允许换行存在，换行并不会终止引用的区块。如果要结束引用，需要一行空白行，来结束引用的区块，此外，引用还可以嵌套使用。代码： 123&gt;这是一个引用：&gt;&gt;这是一个引用的引用&gt;&gt;&gt;这是一个引用的引用的引用 效果： 这是一个引用： 这是一个引用的引用 这是一个引用的引用的引用 4 链接Markdown中插入链接的使用方式是：代码： 12345效果：[这是菩提的主页](http://www.ptshu.cn)&lt;http://www.ptshu.cn&gt;http://www.ptshu.cn 这是菩提的主页http://www.ptshu.cnhttp://www.ptshu.cn 5 图片Markdown中插入图片的使用方式是：代码： 123![图片描述，可写可不写，但是中括号要有](图片地址，本地链接或者URL地址。)![菩提的头像](https://www.ptsh.cf/themeauthor.jpg) 效果： 6 列表列表分为有序列表和无序列表 无序列表，使用*、+、-，再加一个空格作为列表的标记有序列表，使用数字并加上.号，再加一个空格作为列表的标记代码： 1234567* 无序列表 1+ 无序列表 2- 无序列表 31. 有序列表 12. 有序列表 23. 有序列表 3 效果： 无序列表 1 无序列表 2 无序列表 3 有序列表 1 有序列表 2 有序列表 3 如果想要控制列表的层级，则需要在列表符号前使用Tab代码： 123456789+ 无序列表 1+ 无序列表 2 + 无序列表 2.1 + 无序列表 2.21. 有序列表 1 1.1 有序列表 1.12. 有序列表 2 2.1 有序列表2.1 效果： 无序列表 1 无序列表 2 无序列表 2.1 无序列表 2.2 有序列表 1 1.1 有序列表 1.1 有序列表 2 2.1 有序列表2.1 7 代码块Markdown中代码块有两种：如果在一行内需要引用代码，只需要用反引号&#96;引起来就好了。代码： 1`Hello` World. 效果：Hello World. 如果是在一个块内需要引用代码，则在需要引用的代码块的前一行和后一行使用三个反引号，同时在前一个反引号后写入代码的语言。代码： 效果： 1234#include&lt;iostream&gt;int main()&#123; printf(&quot;HelloWorld&quot;);&#125;","text":"学习来源：https://blog.csdn.net/qq_40818172/article/details/126260661?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-126260661-blog-50911365.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-126260661-blog-50911365.pc_relevant_default&amp;utm_relevant_index=6 1 标题使用#号标记，可以表示1-6级标题， 随#的个数递增，一级标题字号最大，六级标题字号最小。代码如下： 123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 效果： 一级标题二级标题三级标题四级标题五级标题六级标题2 字体星号与下划线都可以，单是斜体，双是粗体，三是粗斜体 123456*这是斜体*_这是斜体_**这是粗体**__这是粗体__ ***这是粗斜体*** ___这是粗斜体___ 效果：这是斜体这是斜体这是粗体这是粗体 这是粗斜体 这是粗斜体 3 引用Markdown 中引用通过符号 &gt; 来实现。&gt; 符号后的空格，可有可无。在引用的区块内，允许换行存在，换行并不会终止引用的区块。如果要结束引用，需要一行空白行，来结束引用的区块，此外，引用还可以嵌套使用。代码： 123&gt;这是一个引用：&gt;&gt;这是一个引用的引用&gt;&gt;&gt;这是一个引用的引用的引用 效果： 这是一个引用： 这是一个引用的引用 这是一个引用的引用的引用 4 链接Markdown中插入链接的使用方式是：代码： 12345效果：[这是菩提的主页](http://www.ptshu.cn)&lt;http://www.ptshu.cn&gt;http://www.ptshu.cn 这是菩提的主页http://www.ptshu.cnhttp://www.ptshu.cn 5 图片Markdown中插入图片的使用方式是：代码： 123![图片描述，可写可不写，但是中括号要有](图片地址，本地链接或者URL地址。)![菩提的头像](https://www.ptsh.cf/themeauthor.jpg) 效果： 6 列表列表分为有序列表和无序列表 无序列表，使用*、+、-，再加一个空格作为列表的标记有序列表，使用数字并加上.号，再加一个空格作为列表的标记代码： 1234567* 无序列表 1+ 无序列表 2- 无序列表 31. 有序列表 12. 有序列表 23. 有序列表 3 效果： 无序列表 1 无序列表 2 无序列表 3 有序列表 1 有序列表 2 有序列表 3 如果想要控制列表的层级，则需要在列表符号前使用Tab代码： 123456789+ 无序列表 1+ 无序列表 2 + 无序列表 2.1 + 无序列表 2.21. 有序列表 1 1.1 有序列表 1.12. 有序列表 2 2.1 有序列表2.1 效果： 无序列表 1 无序列表 2 无序列表 2.1 无序列表 2.2 有序列表 1 1.1 有序列表 1.1 有序列表 2 2.1 有序列表2.1 7 代码块Markdown中代码块有两种：如果在一行内需要引用代码，只需要用反引号&#96;引起来就好了。代码： 1`Hello` World. 效果：Hello World. 如果是在一个块内需要引用代码，则在需要引用的代码块的前一行和后一行使用三个反引号，同时在前一个反引号后写入代码的语言。代码： 效果： 1234#include&lt;iostream&gt;int main()&#123; printf(&quot;HelloWorld&quot;);&#125;","categories":[],"tags":[]},{"title":"win7新测试","slug":"win7新测试","date":"2022-09-02T02:47:46.000Z","updated":"2022-09-02T02:47:46.843Z","comments":true,"path":"2022/09/02/win7新测试/","link":"","permalink":"https://www.ptsh.cf/2022/09/02/win7%E6%96%B0%E6%B5%8B%E8%AF%95/","excerpt":"文章内容","text":"文章内容","categories":[],"tags":[]},{"title":"Hexo 的Github与Gitee连接","slug":"Github与Gitee的连接","date":"2022-08-19T13:39:46.000Z","updated":"2022-09-29T13:01:17.876Z","comments":true,"path":"2022/08/19/Github与Gitee的连接/","link":"","permalink":"https://www.ptsh.cf/2022/08/19/Github%E4%B8%8EGitee%E7%9A%84%E8%BF%9E%E6%8E%A5/","excerpt":"连接 Github右键 -&gt; Git Bash Here，设置用户名和邮箱：git config --global user.name &quot;GitHub 用户名&quot;git config --global user.email &quot;GitHub 邮箱&quot;创建 SSH 密匙：输入 ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;，然后一路回车。","text":"连接 Github右键 -&gt; Git Bash Here，设置用户名和邮箱：git config --global user.name &quot;GitHub 用户名&quot;git config --global user.email &quot;GitHub 邮箱&quot;创建 SSH 密匙：输入 ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;，然后一路回车。 添加密匙： 进入 [C:\\Users\\用户名\\.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。 登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。 Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。 验证连接： 打开 Git Bash，输入 ssh -T git@github.com 出现 “Are you sure……”，输入 yes 回车确认。 显示 “Hi xxx! You’ve successfully……” 即连接成功。 连接 Gitee修改根目录_config.yml配置deploy:type: gitrepo: https://gitee.com/ptshucn/ptshucn.git （将地址换成自己的地址）branch: master 然后在blog的根目录执行命令： npm install hexo-deployer-git --save # 安装git插件 git config --global user.email zskang@qq.com # 设置gitee邮箱（gitee的注册邮箱） git config --global user.name ‘ptshucn’ # 设置用户名（git的注册昵称） hexo deploy # 上传到gitee 然后选择gitee pages服务，然后选择开启 或 更新即可。","categories":[{"name":"Github使用","slug":"Github使用","permalink":"https://www.ptsh.cf/categories/Github%E4%BD%BF%E7%94%A8/"}],"tags":[]},{"title":"node_modules瘦身方法","slug":"node-modules瘦身方法","date":"2022-08-19T12:25:00.000Z","updated":"2022-08-19T12:26:46.199Z","comments":true,"path":"2022/08/19/node-modules瘦身方法/","link":"","permalink":"https://www.ptsh.cf/2022/08/19/node-modules%E7%98%A6%E8%BA%AB%E6%96%B9%E6%B3%95/","excerpt":"首先，说明下node_modules文件夹的作用：下载了npm或gulp的一些插件后，打开node_modules可以发现，里面有很多的文件夹，会导致我们将项目拷贝给别人的时候，传输速度会很慢。在拷贝给别人项目的时候，node_modules这个文件夹是不需要一起拷贝的，因为有package.json、package-lock.json。","text":"首先，说明下node_modules文件夹的作用：下载了npm或gulp的一些插件后，打开node_modules可以发现，里面有很多的文件夹，会导致我们将项目拷贝给别人的时候，传输速度会很慢。在拷贝给别人项目的时候，node_modules这个文件夹是不需要一起拷贝的，因为有package.json、package-lock.json。 package.json记录当前项目所依赖模块的版本信息，更新模块时锁定模块的大版本号（版本号的第一位）。package-lock.json记录了node_modules目录下所有模块的具体来源和版本号以及其他的信息，就不做详细讲解了（相信写代码的一看就能大概明白），也可以参考：https://blog.csdn.net/qq_34295211/article/details/103858589详细步骤如下：(初次尝试时 请先备份！请先备份！请先备份！)npm install rimraf -g &#x2F;&#x2F;安装rimraf工具rimraf node_modules &#x2F;&#x2F;使用rimraf删除node_modules文件npm cache clean –force &#x2F;&#x2F;清除缓存npm config set registry https://registry.npm.taobao.org &#x2F;&#x2F;设置国内镜像，防止下载缓慢卡住npm install &#x2F;&#x2F;初始化项目 每次上传项目至服务器备份时，删除node_modules文件夹，要修改项目时再重新初始化项目，安装依赖包。 另外，npm prune 命令的功能是根据package.json里的依赖项，删除不需要的模块文件。执行npm audit fix，可以查看是否少了什么组件","categories":[{"name":"Github使用","slug":"Github使用","permalink":"https://www.ptsh.cf/categories/Github%E4%BD%BF%E7%94%A8/"}],"tags":[]},{"title":"HEXO添加置顶功能","slug":"HEXO添加置顶功能","date":"2022-08-16T12:47:59.000Z","updated":"2022-08-16T12:56:16.368Z","comments":true,"path":"2022/08/16/HEXO添加置顶功能/","link":"","permalink":"https://www.ptsh.cf/2022/08/16/HEXO%E6%B7%BB%E5%8A%A0%E7%BD%AE%E9%A1%B6%E5%8A%9F%E8%83%BD/","excerpt":"目前已经有修改后支持置顶的仓库，可以直接用以下命令安装。(cmd 到博客根目录，nmp运行)$ npm uninstall hexo-generator-index$ npm install hexo-generator-index-pin-top然后在需要置顶的文章的Front-matter中加上top: true即可。","text":"目前已经有修改后支持置顶的仓库，可以直接用以下命令安装。(cmd 到博客根目录，nmp运行)$ npm uninstall hexo-generator-index$ npm install hexo-generator-index-pin-top然后在需要置顶的文章的Front-matter中加上top: true即可。 比如下面这篇文章：title: hexo+GitHub博客搭建实战date: 2017-09-08 12:00:25categories: 博客搭建系列top: true 到目前为止，置顶功能已经可以实现了。","categories":[{"name":"Github使用","slug":"Github使用","permalink":"https://www.ptsh.cf/categories/Github%E4%BD%BF%E7%94%A8/"}],"tags":[]},{"title":"Hexo+Github搭建博客","slug":"Hexo+Github搭建博客","date":"2022-08-08T12:03:03.000Z","updated":"2022-09-29T13:03:29.658Z","comments":true,"path":"2022/08/08/Hexo+Github搭建博客/","link":"","permalink":"https://www.ptsh.cf/2022/08/08/Hexo+Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","excerpt":"使用Hexo+Github搭建博客使用 Hexo+GitHub 搭建个人免费博客教程（小白向）https://zhuanlan.zhihu.com/p/60578464 安装 Hexo使用 npm 一键安装 Hexo 博客程序：npm install -g hexo-cli hexo常用命令hexo new “name” # 新建文章hexo new page “name” # 新建页面hexo g # 生成页面hexo d # 部署hexo g -d # 生成页面并部署hexo s # 本地预览hexo clean # 清除缓存和已生成的静态文件hexo help # 帮助","text":"使用Hexo+Github搭建博客使用 Hexo+GitHub 搭建个人免费博客教程（小白向）https://zhuanlan.zhihu.com/p/60578464 安装 Hexo使用 npm 一键安装 Hexo 博客程序：npm install -g hexo-cli hexo常用命令hexo new “name” # 新建文章hexo new page “name” # 新建页面hexo g # 生成页面hexo d # 部署hexo g -d # 生成页面并部署hexo s # 本地预览hexo clean # 清除缓存和已生成的静态文件hexo help # 帮助 文件夹目录说明：node_modules: 依赖包public：存放生成的页面scaffolds：生成文章的一些模板source：用来存放你的文章themes：主题** _config.yml: 博客的配置文件** 教程2：连接github的命令git config –global user.name “ptshu”git config –global user.email “&#122;&#x73;&#107;&#97;&#110;&#103;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#x6d;“输入 ssh-keygen -t rsa -C “&#x7a;&#x73;&#x6b;&#97;&#x6e;&#103;&#64;&#x71;&#113;&#x2e;&#x63;&#111;&#109;“，然后一路回车。添加密匙：进入 [C:\\Users\\用户名\\.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。验证连接：打开 Git Bash，输入 ssh -T git@github.com 出现 “Are you sure……”，输入 yes 回车确认。显示 “Hi xxx! You’ve successfully……” 即连接成功。 报错信息hexo YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key报错信息是提示hexo的yml配置文件 冒号后面少了空格解决方案：到提示行将对应的空格补上即可https://blog.csdn.net/qq_39026548/article/details/104729964 教程3：添加分类及标签Hexo使用攻略-添加分类及标签https://www.jianshu.com/p/e17711e44e00 首字母大小写而 404Hexo 改变 tag 因为大小写问题而 404 的解决方法https://blog.zhheo.com/p/5511910d.htmlhexo d 上传后about首字母变大写的原因：第一次上传时是大写，覆盖上传还就按第一次的大写写入。解决方法：把文件夹about重命名为其他（如：about2），hexo d 上传，然后再重命名回about，再hexo d 上传就完美解决了。 评论系统-Valine为你的Hexo加上评论系统-Valinehttps://blog.csdn.net/blue_zy/article/details/79071414 [REMOTE REJECTED] MASTERGIT PULL 错误：[REMOTE REJECTED] MASTER -&gt; MASTER (PRE-RECEIVE HOOK DECLINED)解决办法：关闭分支的保护机制https://www.freesion.com/article/7986556587/ 博客菜单显示中文的设置方法：1、在博客根目录的_config.yml文件中，找到language项改为zh-CN。2、主题目录的_config.yml文件中，找到language项改为zh-CN。注：部分主题的_config.yml文件中没有language项的设置。 怎么用键盘敲出反引号切换到英文输入法模式下,找到电脑键盘 Esc 下面的键,敲两下就出现了反引号. 手把手教会你使用Markdown【从入门到精通一篇就够了】https://blog.csdn.net/qq_40818172/article/details/126260661?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-126260661-blog-50911365.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-126260661-blog-50911365.pc_relevant_default&amp;utm_relevant_index=6 Hexo 中文文档https://www.w3cschool.cn/hexodocument/","categories":[{"name":"Github使用","slug":"Github使用","permalink":"https://www.ptsh.cf/categories/Github%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://www.ptsh.cf/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://www.ptsh.cf/tags/Github/"},{"name":"搭建","slug":"搭建","permalink":"https://www.ptsh.cf/tags/%E6%90%AD%E5%BB%BA/"}]},{"title":"我的域名","slug":"我的域名","date":"2022-08-07T11:58:41.000Z","updated":"2022-08-21T15:30:00.096Z","comments":true,"path":"2022/08/07/我的域名/","link":"","permalink":"https://www.ptsh.cf/2022/08/07/%E6%88%91%E7%9A%84%E5%9F%9F%E5%90%8D/","excerpt":"原始域名：ptshu.github.io绑定域名：www.ptsh.cf管理地址：https://github.com/ptshu/","text":"原始域名：ptshu.github.io绑定域名：www.ptsh.cf管理地址：https://github.com/ptshu/","categories":[{"name":"Github使用","slug":"Github使用","permalink":"https://www.ptsh.cf/categories/Github%E4%BD%BF%E7%94%A8/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-08-05T12:03:03.000Z","updated":"2022-08-16T12:46:24.837Z","comments":true,"path":"2022/08/05/hello-world/","link":"","permalink":"https://www.ptsh.cf/2022/08/05/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.添加分类和标签后的文章 Quick Start","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.添加分类和标签后的文章 Quick Start Create a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"Github使用","slug":"Github使用","permalink":"https://www.ptsh.cf/categories/Github%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://www.ptsh.cf/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://www.ptsh.cf/tags/Github/"},{"name":"搭建","slug":"搭建","permalink":"https://www.ptsh.cf/tags/%E6%90%AD%E5%BB%BA/"}]}